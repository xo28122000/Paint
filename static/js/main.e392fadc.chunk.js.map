{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isopenNav","strokeSize","componentDidMount","document","getElementById","value","letsdraw","theCanvas","editorPannel","ctx","getContext","width","getBoundingClientRect","height","addEventListener","e","lineTo","pageX","left","pageY","top","stroke","strokeStyle","lineWidth","lineCap","beginPath","moveTo","window","onresize","id","Navbar","light","expand","style","background","color","NavbarBrand","NavbarToggler","onClick","setState","Collapse","isOpen","this","navbar","Nav","className","NavItem","NavLink","href","htmlFor","type","min","max","step","onChange","justifyContent","alignContent","margin","border","borderColor","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e392fadc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\nclass App extends Component {\n  state = { isopenNav: false, strokeSize: 5 };\n  // componentDidMount = () => {\n  //   // set canvas id to variable\n  //   var canvas = document.getElementById(\"draw\");\n\n  //   // get canvas 2D context and set it to the correct size\n  //   var ctx = canvas.getContext(\"2d\");\n  //   // resize();\n\n  //   // resize canvas when window is resized\n  //   function resize() {\n  //     console.log(window.innerWidth, window.innerHeight);\n  //     ctx.canvas.width = window.innerWidth;\n  //     ctx.canvas.height = window.innerHeight;\n  //   }\n\n  //   // add event listeners to specify when functions should be triggered\n\n  //   // window.addEventListener(\"resize\", resize);\n  //   document.addEventListener(\"mousemove\", draw);\n  //   document.addEventListener(\"mousedown\", setPosition);\n  //   document.addEventListener(\"mouseenter\", setPosition);\n\n  //   // last known position\n  //   var pos = { x: 0, y: 0 };\n\n  //   // new position from mouse events\n  //   function setPosition(e) {\n  //     var rect = canvas.getBoundingClientRect();\n  //     // console.log(rect.left, rect.right);\n  //     // console.log(e.clientX - rect.left, e.clientY - rect.right);\n  //     pos.x = e.clientX - rect.x;\n  //     pos.y = e.clientY - rect.y;\n  //     // console.log(pos.x, pos.y);\n  //     // pos.x = e.clientX;\n  //     // pos.y = e.clientY;\n  //   }\n\n  //   function draw(e) {\n  //     console.log(pos.x, pos.y);\n  //     if (e.buttons !== 1) return; // if mouse is pressed.....\n  //     if (e.clientX < 0 || e.clientY < 0) {\n  //       console.log(\"escape if out of canvas\");\n  //       return; // if mouse is pressed.....\n  //     }\n\n  //     ctx.beginPath(); // begin the drawing path\n\n  //     ctx.lineWidth = 5; // width of line\n  //     ctx.lineCap = \"round\"; // rounded end cap\n  //     ctx.strokeStyle = \"#000000\"; // hex color of line\n\n  //     ctx.moveTo(pos.x, pos.y); // from position\n  //     s(e);\n  //     ctx.lineTo(pos.x, pos.y); // to position\n\n  //     ctx.stroke(); // draw it!\n  //   }\n  // };\n\n  componentDidMount = () => {\n    document.getElementById(\"formControlRange\").value = 5;\n    var letsdraw = false;\n    var theCanvas = document.getElementById(\"draw\");\n    var editorPannel = document.getElementById(\"editorPannel\");\n    var ctx = theCanvas.getContext(\"2d\");\n    theCanvas.width = editorPannel.getBoundingClientRect().width * 0.93;\n    theCanvas.height = editorPannel.getBoundingClientRect().height * 0.95;\n\n    // var canvasOffset = theCanvas.offsetHeight();\n\n    theCanvas.addEventListener(\"mousemove\", function(e) {\n      if (letsdraw === true) {\n        ctx.lineTo(\n          e.pageX - theCanvas.getBoundingClientRect().left,\n          e.pageY - theCanvas.getBoundingClientRect().top\n        );\n        ctx.stroke();\n      }\n    });\n\n    theCanvas.addEventListener(\"mousedown\", e => {\n      // setup all of the properties for your line on mousedown, not mousemove\n      letsdraw = true;\n      ctx.strokeStyle = \"white\";\n      ctx.lineWidth = this.state.strokeSize;\n      ctx.lineCap = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(\n        e.pageX - theCanvas.getBoundingClientRect().left,\n        e.pageY - theCanvas.getBoundingClientRect().top\n      );\n    });\n\n    theCanvas.addEventListener(\"mouseup\", function() {\n      // bind to the window mouse up, that way if you mouse up and you're not over\n      // the canvas you'll still get the release of the drawing.\n      letsdraw = false;\n    });\n\n    window.onresize = () => {\n      theCanvas.width = editorPannel.getBoundingClientRect().width * 0.93;\n      theCanvas.height = editorPannel.getBoundingClientRect().height * 0.95;\n    };\n  };\n\n  render() {\n    const sliderChange = () => {\n      this.setState({\n        strokeSize: document.getElementById(\"formControlRange\").value\n      });\n    };\n\n    const toggleNav = () => {\n      this.setState({ isopenNav: !this.state.isopenNav });\n    };\n\n    return (\n      <div id=\"Root\">\n        <Navbar\n          id=\"NavBar\"\n          light\n          expand=\"md\"\n          style={{ background: \"RGBA(0,0,0,1)\", color: \"RGBA(255,255,255,1)\" }}\n        >\n          <NavbarBrand style={{ color: \"RGBA(255,255,255,1)\" }}>\n            Paint\n          </NavbarBrand>\n          <NavbarToggler onClick={toggleNav} />\n          <Collapse isOpen={this.state.isopenNav} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"#\" style={{ color: \"RGBA(255,255,255,1)\" }}>\n                  Home\n                </NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink\n                  href=\"https://xo28122000.github.io/portfolio/\"\n                  style={{ color: \"RGBA(255,255,255,1)\" }}\n                >\n                  Portfolio\n                </NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n\n        <div id=\"body\">\n          <div id=\"editorWindow\" className=\"container-fluid\">\n            <div\n              className=\"row\"\n              style={{\n                height: \"100%\"\n              }}\n            >\n              <div\n                id=\"optionPannel\"\n                className=\"col-2\"\n                style={{ color: \"black\" }}\n              >\n                <div className=\"container\">\n                  <div className=\"row\">\n                    <label htmlFor=\"formControlRange\">Stroke width:</label>\n                    <br />\n                    <input\n                      type=\"range\"\n                      className=\"form-control-range custRange\"\n                      id=\"formControlRange\"\n                      min=\"1\"\n                      max=\"35\"\n                      step=\"1\"\n                      onChange={sliderChange}\n                    />\n                  </div>\n                </div>\n              </div>\n              <div\n                id=\"editorPannel\"\n                className=\"col-10\"\n                style={{ justifyContent: \"center\", alignContent: \"center\" }}\n              >\n                <div\n                  className=\"row\"\n                  style={{\n                    justifyContent: \"center\",\n                    alignContent: \"center\",\n                    margin: \"12px\"\n                  }}\n                >\n                  <div className=\"col-12\">\n                    <canvas\n                      id=\"draw\"\n                      style={{\n                        border: \"1px solid\",\n                        borderColor: \"#fffff\",\n                        background: \"black\"\n                      }}\n                    ></canvas>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div id=\"footer\"></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}